@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/*This is the unversal selector, it makes it so every
browser has a set a baseline styles to run when they load 
because not every browser is the same.  In this case we are setting
these specific elements*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  /* we initially did 10px here.  We don't want to do px
    because a user can custom define the root font size for his browser,
    if you do the 10 px size it will bully his setting and force your
    font size onto his browser. */
  /* Default font size is 16, so if we want 10 we do 10/16 and input that percentage */
  font-size: 62.5%; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  /* line-height will be 1.7 times bigger than normal */
  line-height: 1.7;
  color: #777;
  /* padding: rem default is in the html tag, 10 px.  so 3rem is 30 px. */
  padding: 3rem;
  /* changes box model so borders and padding 
    are no longer added to total width/height for
    an element*/
  box-sizing: border-box; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* determines if the backface (back) part is hidden or not.  we did
    this to smooth our animation.  Without this we had some slight
    shaking in our animation and this fixes it.  The instructor says
    that nobody really knows why this happens, this hack just works. */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    /* h1's are by default an "in-line" type element.
        We have to set them to a block type */
    display: block;
    font-size: 6rem;
    font-weight: 700;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    /* faster at the beginning, slower at the end with the next line of code */
    animation-timing-function: ease-out;
    /* animation-iteration-count: 3; */
    /* animation-delay: 3s; */ }
  .heading-primary--sub {
    /* h1's are by default an "in-line" type element.
        We have to set them to a block type */
    display: block;
    font-size: 2rem;
    font-weight: 400;
    letter-spacing: 1.74 rem;
    /* Can combine what we did in .heading-primary-main into one line as shown */
    animation: moveInRight 1s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: .2rem;
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.btn {
  /* the ::after are "pesudo" elements.  we used these for the goofy animation. */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    /*gets rid of the underline*/
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    transition: all .2s;
    /* this transition has to be in the base state for the transitions below*/
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* will look for the nearest relative parent.  we added position:relative to the btn:link area for this. */
    position: absolute;
    top: 0;
    left: 0;
    /* have to set zindex or else this will sit on top of the button and
        completely cover it.  We want our button on top since they are in the
        same position. */
    z-index: -1;
    transition: all .4s; }
  .btn--animated {
    /* name -- duration -- timing-function -- delay */
    animation: moveInBottom .5s ease-out .75s;
    /* makes it so our button isn't visible to start... not sure how it does this. */
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px; }

.header {
  /* this says it should be 95% of the viewport height. */
  height: 95vh;
  /* adding in a gradient, we want our base image to be
    listed last, and then our gradient image first so it is
    on top of the other image. */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* cover tries to fit the entire element in the width of the viewport */
  background-size: cover;
  /* top of image stays at top of container */
  background-position: top;
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); }
  .header__logo-box {
    /* absolute within the parent element.  parent element should
    have relative positioning */
    position: absolute;
    top: 4rem;
    left: 4rem; }
    .header__logo-box:hover .logo {
      animation: moveInRight .6s ease-in; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    /* the two below are in relation to the parent element. */
    top: 40%;
    left: 50%;
    /* without the line of code below this, it will position the upper left corner of
        our div at the middle mark, which means our element will be lower and more right
        then what we want.  the transform: translate takes care of that for us. This
        is in relation to the element itsself.*/
    transform: translate(-50%, -50%);
    text-align: center; }

.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - (2 * 6rem)) / 3); }
  .row .col-1-of-4 {
    width: calc((100% - (3 * 6rem)) / 4); }
  .row .col-2-of-3 {
    width: calc((((100% - (2 * 6rem)) / 3) * 2) + 6rem); }
  .row .col-2-of-4 {
    width: calc((((100% - (3 * 6rem)) / 4) * 2) +  6rem); }
  .row .col-3-of-4 {
    width: calc((((100% - (3 * 6rem)) / 4) * 3) + (2 * 6rem)); }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }
